---
title: "CHL8010: Statistical Programming and Computation in Health Data"
Alex Gebreamlak: "Week 4 In-class Assignment"
date: "2024-09-30"
format: pdf
---

```{r, include=FALSE}
# Loading Packages
library(tidyverse)
library(here)
library(texreg)
library(multgee)
library(table1)
library(dplyr)
library(tidyr)
library(usethis) 
library(ggplot2)
Final_data <- read.csv(here("data","Cleaned_primary_analysis_data.csv"))

```

Observations from Canada should look like this...

```{r}
Final_Canada <- Final_data %>%
  dplyr::filter(country_name == "Canada")

head(Final_Canada, 10)
```

Observations from Ecuador should look like this...

```{r}
Final_Equador <- Final_data %>%
  dplyr::filter(country_name == "Ecuador")
head(Final_Equador, 10)
```

## Exploratory data analysis

Use the rest of the class time to explore the final data that will be used for analysis starting next week. At the end of the class, write a summary of your findings and push your **Quarto document (pdf)** to your repo.

```{r}
head(Final_data)
tail(Final_data)
```

```{r}
dim(Final_data)
str(Final_data)
```

3720 rows by 21 columns
Data types include: 3 character, 8 integer, and 10 numerical

```{r}
# Data shows 186 countries each with 20 rows
head(Final_data %>% count(ISO),10)
Final_data %>% count(ISO) %>% count(n)
```

```{r}
#Plotting conflicts by ISO Code (only for countries with minimum 1 conflict)
conflict_data <- Final_data %>%
  group_by(ISO) %>%
  summarise(total_conflicts = sum(Conflict, na.rm = TRUE)) %>%
  filter(total_conflicts > 0) %>%
  arrange(desc(total_conflicts))
conflict_data

#Plotting deaths by ISO Code (only for countries with minimum 1 conflict related death)
death_data <- Final_data %>%
  group_by(ISO) %>%
  summarise(total_deaths = sum(Totdeath, na.rm = TRUE)) %>%
  filter(total_deaths > 0) %>%
  arrange(desc(total_deaths))
death_data
```

```{r}
# Create the plot for conflict
ggplot(conflict_data, aes(x = reorder(ISO, -total_conflicts), y = total_conflicts)) +
  geom_bar(stat = "identity") +
  labs(title = "Conflict Count by ISO Code", x = "ISO Code", y = "Conflict Count") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, size = 8),
    plot.title = element_text(hjust = 0.5)  
  )
```

```{r}
# Create the plot 
ggplot(death_data, aes(x = reorder(ISO, -total_deaths), y = total_deaths)) +
  geom_bar(stat = "identity") +
  labs(title = "Conflict Death Count by ISO Code", x = "ISO Code", 
       y = "Conflict Death Count") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, size = 8),
    plot.title = element_text(hjust = 0.5))
```


```{r}
conflict_summary <- Final_data %>%
  group_by(Year, Conflict) %>%
  summarise(mean = mean(Totdeath, na.rm = TRUE), .groups = 'drop')

ggplot(conflict_summary, aes(x = Year, y = mean, color = as.factor(Conflict), 
                             group = Conflict)) +
  geom_line(alpha = 0.7, size = 1) + 
  geom_point() +  
  labs(title = "Conflict Related Deaths by Year Grouped by Conflict Status",
       x = "Year",
       y = "Total Deaths",
       color = "Conflict Status") +  
  theme_minimal() +
  scale_color_manual(values = c("0" = "red", "1" = "blue"))  +
  theme(plot.title = element_text(hjust = 0.5))
```

```{r}
#Analyze missingness
missingness <- sum(is.na(Final_data))
missingness
```

648 total missing values

```{r}

missingness_column <- colSums(is.na(Final_data))
missingness_column
```
```{r}
missing_percent <- round(missingness_column/ nrow(Final_data) * 100,3)
missing_percent
```

Maternal mortality had the most missingness of the outcome variables (N = 426 or 11.45%)

```{r}
#Correlation of Outcome variables
round(cor(Final_data[, c("MatMor", "NeoMor", "InfMor", "Und5Mor")], 
          use = "complete.obs"),4)

```

```{r}
#Longitudinal Maternal Mortality trends by ISO Code
ggplot(Final_data, aes(Year, MatMor)) + 
  geom_line(aes(group = ISO), alpha = 1/5) + 
  labs(title = "Maternal Mortality trends by ISO Code", x = "Year", 
       y = "Maternal Mortality") +
  scale_y_log10() + 
  geom_smooth(se = FALSE) +
  theme(plot.title = element_text(hjust = 0.5))
```




